local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {}

local Options = Fluent.Options

local Elements = {}

function Elements.Init(WindowOptions,TabsInit)
    local ScriptVersion = "1.0"

    local Window = Fluent:CreateWindow({
        Title = WindowOptions.Title,
        SubTitle = WindowOptions.SubTitle,
        TabWidth = WindowOptions.TabWidth,
        Size = WindowOptions.Size,
        Acrylic = WindowOptions.Acrylic, -- The blur may be detectable, setting this to false disables blur entirely
        Theme = WindowOptions.Theme,
        MinimizeKey = WindowOptions.MinimizeKey -- Used when theres no MinimizeKeybind
    })

    Tabs = TabsInit
end

-- Fluent Custom Functions

local Toggles = {}
_G.SF = {}
local insertedNumbers = {}

function Elements:CreateToggle(Tab, Name, ValueName, DoFunction, DontSpawn, DoAfterDestroy)

    local ToggleNum = #Toggles + 1
    local randomNum = 0

    table.insert(Toggles, ToggleNum)
    
    repeat

        randomNum = math.random(55,22222)
        task.wait(.01)

    until not table.find(insertedNumbers, randomNum)

    table.insert(insertedNumbers, randomNum)

    local Toggle = Tabs[Tab]:AddToggle(ValueName, { Title = Name, Default = _G.Settings[ValueName] })
    Toggle:OnChanged(function()
        local Value = Options[ValueName].Value

        _G.Settings[ValueName] = Value
        if not _G.SF[randomNum] and _G.Settings[ValueName] then

            _G.SF[randomNum] = true
            if not DontSpawn then

                local ab = task.spawn(DoFunction)

                repeat
                    task.wait(.1)
                until not _G.Settings[ValueName]

                task.cancel(ab)
                _G.SF[randomNum] = false

                if DoAfterDestroy then
                    task.spawn(DoAfterDestroy)
                end
                
            end
        end

    end)

    return Toggle
end

function Elements:CreateNotification(title,content,subcontent,duration)
    return Fluent:Notify({
        Title = title,
        Content = content,
        SubContent = subcontent, -- Optional
        Duration = duration -- Set to nil to make the notification not disappear
    })
end

function Elements:CreateParagraph(Tab,title,content)
    return Tabs[Tab]:AddParagraph({
        Title = title,
        Content = content
    })
end

function Elements:CreateSlider(Tab, name, description,OptionsTable, ValueName, DoFunction, Function)
    if type(OptionsTable) == "table" then

        local Slider = Tabs[Tab]:AddSlider(ValueName, {
            Title = name,
            Description = description,
            Default = OptionsTable["default"],
            Min = OptionsTable["min"],
            Max = OptionsTable["max"],
            Rounding = OptionsTable["decimals"],
            Callback = function(Value)
                _G.Settings[ValueName] = Value

                if DoFunction then
                    task.spawn(Function)
                end
            end
        })

        return Slider

    end
end

function Elements:CreateDropdown(Tab,ValueName,Name,Options,DoFunction,Function)

    local Dropdown = Tabs[Tab]:AddDropdown(ValueName, {
        Title = Name,
        Values = Options,
        Multi = false,
        Default = _G.Settings[ValueName],
    })
        
    Dropdown:OnChanged(function(Value)
        _G.Settings[ValueName] = Value
        if DoFunction then
            task.spawn(Function)
        end
    end)

    return Dropdown
end

function Elements:CreateMultiDropdown(Tab,ValueName,Name,Options,description,DoFunction,Function)

    local Def

    if type(_G.Settings[ValueName]) == "table" then
        Def = _G.Settings[ValueName]
    else
        Def = {_G.Settings[ValueName]}
    end

    local MultiDropdown = Tabs[Tab]:AddDropdown(ValueName, {
        Title = Name,
        Description = description,
        Values = Options,
        Multi = true,
        Default = Def,
    })
    
    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end

        _G.Settings[ValueName] = Values

        if DoFunction then
            task.spawn(Function)
        end
    end)

    return MultiDropdown
end

function Elements:CreateInput(Tab,ValueName,Name,PlaceholderText,NumbersOnly,DoFunction,Function)
    local Input = Tabs[Tab]:AddInput(ValueName, {
        Title = Name,
        Default = _G.Settings[ValueName],
        Placeholder = PlaceholderText,
        Numeric = NumbersOnly, -- Only allows numbers
        Finished = true, -- Only calls callback when you press enter
        Callback = function(Value)
            _G.Settings[ValueName] = Value
            if DoFunction then
                task.spawn(Function)
            end
        end
    })

    return Input
end

function Elements:CreateSection(Tab,SectionName)
    Tabs[Tab]:AddSection(SectionName)
end

return Elements
